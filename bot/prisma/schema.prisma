// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Server {
  id                           String               @id @default(uuid())
  discordId                    String               @unique @db.VarChar(32)
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  currencyHistoryChannelId     String?
  currencyHistoryChannelActive Boolean?             @default(true)
  currencyCount                Int                  @default(0)
  CurrencyHistoryLog           CurrencyHistoryLog[]
  CurrencyRule                 CurrencyRule[]
  UserServer                   UserServer[]
  Poll                         Poll[]
}

model User {
  id                        String               @id @default(uuid())
  discordId                 String               @unique @db.VarChar(32)
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  botCurrencyCount          Int                  @default(0)
  CommandHistory            CommandHistory[]
  Scores                    Score[]
  Scoreboards               Scoreboard[]
  Permission                Permission[]
  Keyword                   Keyword[]
  Stopwatch                 Stopwatch[]
  SendCurrencyHistoryLog    CurrencyHistoryLog[] @relation("Sender")
  ReceiveCurrencyHistoryLog CurrencyHistoryLog[] @relation("Receiver")
  CurrencyRule              CurrencyRule[]
  UserServer                UserServer[]
  Poll                      Poll[]
  PollVote                  PollVote[]
}

model UserServer {
  id                String @id @default(uuid())
  User              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Server            Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  userId            String
  serverId          String
  currencyCount     Int    @default(0)
  bankCurrencyCount Int    @default(0)

  @@unique([userId, serverId])
}

// keep in sync with currency.ts
enum CurrencyAction {
  COMMAND
  MESSAGE
  REACTION
}

model CurrencyRule {
  id                 String               @id @default(uuid())
  roleId             String
  amount             Int
  action             CurrencyAction
  serverId           String
  Server             Server               @relation(fields: [serverId], references: [id], onDelete: Cascade)
  userId             String?
  User               User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  CurrencyHistoryLog CurrencyHistoryLog[]
}

model CurrencyHistoryLog {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Server         Server        @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId       String
  delta          Int
  // if currency rule is set, transaction is income
  currencyRule   CurrencyRule? @relation(fields: [currencyRuleId], references: [id])
  currencyRuleId String?
  Sender         User?         @relation(name: "Sender", fields: [senderId], references: [id])
  senderId       String?
  Receiver       User          @relation(name: "Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId     String
  reaction       String?
  messageId      String?

  // a user can only react with an emoji once on a message
  @@unique([receiverId, reaction, messageId])
}

model Permission {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commandId String
  roleId    String
  serverId  String
  // In theory, a user could be deleted but we want to persist the Permission record.
  userId    String?
  User      User?    @relation(references: [id], onDelete: SetNull, fields: [userId])

  @@unique([roleId, commandId, serverId])
}

model CommandHistory {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(references: [id], onDelete: Cascade, fields: [userId])
  userId      String
  commandName String
  commandRaw  String?
}

model Score {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  description String?
  color       String
  amount      Int          @default(0)
  serverId    String
  channelId   String
  userId      String
  User        User         @relation(references: [id], onDelete: Cascade, fields: [userId])
  Scoreboards Scoreboard[]

  Keyword Keyword[]
  @@unique([name, serverId])
}

model Scoreboard {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  serverId    String
  channelId   String
  userId      String
  User        User     @relation(references: [id], onDelete: Cascade, fields: [userId])
  Scores      Score[]

  @@unique([name, serverId])
}

enum KeywordAction {
  UP
  DOWN
}

model Keyword {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  keyword   String
  scoreId   String
  Score     Score         @relation(fields: [scoreId], references: [id], onDelete: Cascade)
  action    KeywordAction @default(UP)
  amount    Int           @default(1)
  serverId  String
  channelId String?
  userId    String?
  User      User?         @relation(fields: [userId], references: [id])

  @@unique([keyword, scoreId, serverId])
}

model Stopwatch {
  id        String    @id @default(uuid())
  serverId  String
  channelId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  startedAt DateTime?
  stoppedAt DateTime?
  userId    String?
  User      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([name, serverId])
}

model Poll {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String       @unique
  question   String
  isOpen     Boolean      @default(true)
  Server     Server       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId   String
  messageId  String
  CreatedBy  User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  PollOption PollOption[]
  PollVote   PollVote[]

  @@unique([name, serverId, isOpen])
}

// no explicit CreatedBy reference since this would always be the same as Poll
model PollOption {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String
  content   String
  Votes     PollVote[]
}

model PollVote {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId       String
  PollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  pollOptionId String
  CreatedBy    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@unique([userId, pollId])
}
