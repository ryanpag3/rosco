// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  discordId      String           @unique @db.VarChar(32)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  CommandHistory CommandHistory[]
  Scores         Score[]
  Scoreboards    Scoreboard[]
  Permission     Permission[]
  Keyword        Keyword[]
}

model Permission {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commandId String
  roleId    String
  serverId  String
  // In theory, a user could be deleted but we want to persist the Permission record.
  userId    String?
  User      User?    @relation(references: [id], onDelete: SetNull, fields: [userId])

  @@unique([roleId, commandId, serverId])
}

model CommandHistory {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(references: [id], onDelete: Cascade, fields: [userId])
  userId      String
  commandName String
  commandRaw  String?
}

model Score {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  description String?
  color       String
  amount      Int          @default(0)
  serverId    String
  channelId   String
  userId      String
  User        User         @relation(references: [id], onDelete: Cascade, fields: [userId])
  Scoreboards Scoreboard[]

  Keyword Keyword[]
  @@unique([name, serverId])
}

model Scoreboard {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  serverId    String
  channelId   String
  userId      String
  User        User     @relation(references: [id], onDelete: Cascade, fields: [userId])
  Scores      Score[]

  @@unique([name, serverId])
}

enum KeywordAction {
  UP
  DOWN
}

model Keyword {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  keyword   String
  scoreId   String
  Score     Score         @relation(fields: [scoreId], references: [id])
  action    KeywordAction @default(UP)
  amount    Int           @default(1)
  serverId  String
  channelId String?
  userId    String?
  User      User?         @relation(fields: [userId], references: [id])

  @@unique([keyword, scoreId, serverId])
}
