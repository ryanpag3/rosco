name: Build

on:
  push:
    branches:
      - '*'

jobs:
  start-runner:
    name: Start a self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-123
          ec2-instance-type: t2.nano
          subnet-id: subnet-3d8df115
          security-group-id: sg-07335f4bd9769ac34
  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      # - do-the-job # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: '16'
      - name: build bot
        run: |
          yarn install
          npx tsc
        working-directory: ./bot
  run-tests:
    needs: build
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: test_guacbot_db
          POSTGRES_PASSWORD: adminadmin
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: '16'
      - name: Run Tests
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          yarn install
          yarn jest
        working-directory: ./bot
  build-docker:
    needs: run-tests
    name: Build Docker
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: '16'
      - name: login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: build bot
        run: |
          yarn install
          npx tsc
          export PUSH=true; ./buildDocker.sh ryanpage/guac-bot latest
          export PUSH=true; ./buildDocker.sh ryanpage/guac-bot ${{ github.run_number }}
        working-directory: ./bot